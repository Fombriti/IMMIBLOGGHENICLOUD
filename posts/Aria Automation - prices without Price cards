---
title: "Aria Automation - Prices without price cards" # Title of the blog post.
date: 2023-11-24T12:46:49+01:00 # Date of post creation.
description: "Article description." # Description used for search engine.
draft: true # Sets whether to render this page. Draft of true will not be rendered.
usePageBundles: false
toc: true # Controls if a table of contents should be generated for first-level links automatically.
# menu: main
thumbnail: "/images/path/thumbnail.png" # Sets thumbnail image appearing inside card on homepage.
codeMaxLines: 10 # Override global value for how many lines within a code block before auto-collapsing.
categories:
  - vmware
tags:
  - POWERSHELL
  - VMWARE
  - VRA
  - VRO
---

# Intro

Recentemente mi è stato richiesto di creare alcuni Blueprint e mostrare il prezzo della risorsa al momento della richiesta attraverso il service broker. Questo senza avere la possibilità di utilizzare le pricing cards di VMware Aria Automation.

La necessità era quella di mostrare template con queste caratteristiche:

* Template Azure
  * OS: Windows And Linux
  * 3 Flavours: Small, Medium and Large
  * Managed or Unamanged Machine (SLA)
  * In case the vm is managed you have Monitoring SLA - STD or H24
* Template GCP
  * OS: Windows And Linux
  * 3 Flavours: Small, Medium And Large
  * Managed or Unamanged Machine (SLA)
  * In case the vm is managed you have Monitoring SLA - STD or H24
* Template vCenter Windows
  * OS: Windows 2019 or 2022
  * 3 Flavours: Small, Medium And Large
  * Managed or Unamanged Machine
  * In case the vm is managed you have Monitoring SLA - STD or H24 

Il prezzo varia a seconda del Flavour, del sistema operativo, dal fatto che sia Managed o Unamanged e dal tipo di SLA in caso la vm sia managed.

Per avere una gestione degli aggiornamenti dei prezzi futuri più elastica possibile la mia soluzione è stata quella di andare a leggere i prezzi da un file CSV utilizzando Powershell.

## Preparazione delle risorse
### Blueprints

In vediamo i 3 Blueprint che ho preparato:

#### vCenter Windows Blueprint
Questo Blueprint prevede il deploy di una vm, in questo caso Windows e viene specificato in quale vCenter e Storage allocarla.

Con Managed si intende una vm di produzione deve essere monitorata, backuppata ecc.. Lo SLA dovrebbe essere "Yes" solo nel caso la vm sia Managed.


Gli input e quindi le possibilità di personalizzazione sono:

* Nome
* Image
* Flavour
* SLA
* Managed
* Network

![vCenter VM Blueprint](/images/prices_vcenter_blueprint.png)

```yaml 
formatVersion: 1
inputs:
  Name:
    type: string
    title: Name
  Image:
    type: string
    title: Image
    oneOf:
      - title: WIN-SRV-2019
        const: WIN-2019-TEMPLATE
      - title: WIN-SRV-2022
        const: WIN-2022-TEMPLATE
    default: WIN-2019-TEMPLATE
  Flavour:
    type: string
    title: Flavour
    oneOf:
      - title: SMALL
        const: SMALL
      - title: MEDIUM
        const: MEDIUM
      - title: LARGE
        const: LARGE
  Managed:
    type: string
    titile: Manged
    oneOf:
      - title: 'Yes'
        const: 'YES'
      - title: 'No'
        const: 'NO'
  sla:
    type: string
    title: SLA
    oneOf:
      - title: H24
        const: H24
      - title: STD
        const: STD
  Network:
    type: string
    title: Network
    oneOf:
      - title: YOUR_NETWORK_NAME
        const: network:YOUR_NETWORK_TAG
resources:
  Cloud_vSphere_Machine_1:
    type: Cloud.vSphere.Machine
    properties:
      name: ${input.Name}
      image: ${input.Image}
      flavor: ${input.Flavour}
      Managed: ${input.Managed}
      sla: ${input.sla}
      storage:
        constraints:
          - tag: Storage:YOUR_STORAGE_TAG
      networks:
        - network: ${resource.Cloud_vSphere_Network_1.id}
      constraints:
        - tag: Cluster:YOUR_CLUSTER_TAG
  Cloud_vSphere_Network_1:
    type: Cloud.vSphere.Network
    properties:
      networkType: existing
      constraints:
        - tag: ${input.Network}

```

# GCP Blueprint

Il Blueprint GCP disponde di immagini windows e linux, in questo caso essendo configurato un solo Cloud Account non c'è bisogno di specificare cose come il cluster ma basterà aggiungere il tag associato alla Cloud Zone alla vm.

Gli input sono:

* Nome
* Image
* Flavour
* SLA
* Managed


![GCP VM Blueprint](/images/prices_gcp_blueprint.png)
```yaml 

formatVersion: 1
inputs:
  Name:
    type: string
    title: Name
  Image:
    type: string
    title: System OS
    description: Choose OS
    oneOf:
      - title: Windows Server 2022
        const: GCP-IMG_Win202022
      - title: Windows Server 2019
        const: GCP-IMG_Win2019
      - title: UBUNTU-2210
        const: GCP-UBUNTU-2210
    default: GCP-IMG_Win2019
  Flavour:
    type: string
    title: Flavour
    oneOf:
      - title: SMALL
        const: SMALL-GCP-n2-standard-2
      - title: MEDIUM
        const: MEDIUM-GCP-n2-standard-4
      - title: LARGE
        const: LARGE-GCP-n2-standard-8
  Managed:
    type: string
    titile: Manged
    oneOf:
      - title: 'Yes'
        const: 'YES'
      - title: 'No'
        const: 'NO'
  sla:
    type: string
    title: SLA
    oneOf:
      - title: H24
        const: H24
      - title: STD
        const: STD
resources:
  Cloud_GCP_Machine_1:
    type: Cloud.GCP.Machine
    properties:
      name: ${input.Name}
      image: ${input.Image}
      flavor: ${input.Flavour}
      Managed: ${input.Managed}
      sla: ${input.sla}
      networks:
        - assignPublicIpAddress: false
      constraints:
        - tag: platform:gcp #match only one gcp cloud zone and associated network

```
### Azure Blueprint

Anche in questo caso ho mappato immagini Windows e Linux, il resto del template è molto simile ai precedenti.

Gli input sono come per GCP:

* Nome
* Image
* Flavour
* SLA
* Managed

![AZURE VM Blueprint](/images/prices_azure_blueprint.png)
```yaml 
formatVersion: 1
inputs:
  Name:
    type: string
    title: Name
  Image:
    type: string
    title: System OS
    description: Choose OS
    oneOf:
      - title: Windows Server 2019
        const: Azure-WindowsServer:2019-Datacenter:lates
      - title: UBUNTU-2204
        const: AZURE-UBUNTU-2204
    default: Azure-WindowsServer:2019-Datacenter:lates
  Flavour:
    type: string
    title: Flavour
    oneOf:
      - title: SMALL
        const: Azure-Standard_B2as_v2
      - title: MEDIUM
        const: Azure-Standard_B4als_v2
      - title: LARGE
        const: Azure-Standard_B8als_v2
  Managed:
    type: string
    titile: Manged
    oneOf:
      - title: 'Yes'
        const: 'YES'
      - title: 'No'
        const: 'NO'
  sla:
    type: string
    title: SLA
    oneOf:
      - title: H24
        const: H24
      - title: STD
        const: STD
resources:
  Cloud_Network_1:
    type: Cloud.Network
    properties:
      networkType: existing
      constraints:
        - tag: Network:YOUR_AZURE_NETWORK_TAG
  Cloud_Azure_Machine_1:
    type: Cloud.Azure.Machine
    properties:
      image: ${input.Image}
      flavor: ${input.Flavour}
      Managed: ${input.Managed}
      sla: ${input.sla}
      constraints:
        - tag: YOUR_AZURE_ZONE_TAG
      networks:
        - network: ${resource.Cloud_Network_1.id}
        - assignPublicIpAddress: false

```

### CSV file
### vRo Action
## Service Broker
### Using vRo Action in Service Broker
## Notes